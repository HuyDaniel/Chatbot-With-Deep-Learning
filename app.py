import customtkinter as ctk
from tkinter import messagebox
import tkinter.ttk as ttk  # S·ª≠ d·ª•ng ttk t·ª´ tkinter thay v√¨ ttkbootstrap
from chatbot import DeepLearningChatbot  # Gi·∫£ ƒë·ªãnh b·∫°n ƒë√£ c√≥ l·ªõp n√†y

# T·∫Øt DPI scaling ƒë·ªÉ tr√°nh l·ªói
ctk.deactivate_automatic_dpi_awareness()


class ChatbotApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Chatbot H·ªçc S√¢u - Ti·∫øng Vi·ªát")
        self.root.geometry("700x800")
        self.root.minsize(600, 700)
        self.chatbot = DeepLearningChatbot()  # Kh·ªüi t·∫°o chatbot
        self.recording_popup = None  # Bi·∫øn ƒë·ªÉ l∆∞u c·ª≠a s·ªï pop-up
        self.setup_ui()

    def create_recording_popup(self):
        """T·∫°o c·ª≠a s·ªï pop-up hi·ªÉn th·ªã khi ƒëang ghi √¢m"""
        if self.recording_popup is not None:
            self.recording_popup.destroy()  # ƒê√≥ng pop-up c≈© n·∫øu c√≥

        self.recording_popup = ctk.CTkToplevel(self.root)
        self.recording_popup.title("ƒêang ghi √¢m")
        self.recording_popup.geometry("300x150")
        self.recording_popup.resizable(False, False)
        self.recording_popup.transient(self.root)  # ƒê·∫∑t pop-up l√† c·ª≠a s·ªï con c·ªßa c·ª≠a s·ªï ch√≠nh
        self.recording_popup.grab_set()  # ƒê·∫£m b·∫£o pop-up nh·∫≠n focus

        # T√πy ch·ªânh giao di·ªán pop-up
        self.recording_popup.configure(fg_color="#2A2D3E")

        # Nh√£n hi·ªÉn th·ªã "ƒêang ghi √¢m..."
        label = ctk.CTkLabel(
            self.recording_popup,
            text="ƒêang ghi √¢m...",
            font=("Helvetica", 16, "bold"),
            text_color="#DCDDDE"
        )
        label.pack(pady=20)

        # Th√™m bi·ªÉu t∆∞·ª£ng micro
        micro_icon = ctk.CTkLabel(
            self.recording_popup,
            text="üé§",
            font=("Helvetica", 40),
            text_color="#FF9500"
        )
        micro_icon.pack()

        # ƒê·∫£m b·∫£o pop-up ·ªü tr√™n c√πng
        self.recording_popup.lift()
        self.recording_popup.attributes('-topmost', True)  # ƒê·∫∑t pop-up lu√¥n ·ªü tr√™n c√πng
        self.recording_popup.update()  # C·∫≠p nh·∫≠t giao di·ªán ƒë·ªÉ tr√°nh l·ªói hi·ªÉn th·ªã

    def close_recording_popup(self):
        """ƒê√≥ng c·ª≠a s·ªï pop-up sau khi ghi √¢m xong"""
        if self.recording_popup is not None:
            self.recording_popup.destroy()
            self.recording_popup = None

    def record_and_send(self):
        """Ghi √¢m v√† g·ª≠i tin nh·∫Øn t·ª´ gi·ªçng n√≥i"""
        try:
            # Hi·ªÉn th·ªã pop-up tr∆∞·ªõc khi ghi √¢m
            self.create_recording_popup()
            self.status_var.set("ƒêang ghi √¢m...")
            self.root.update_idletasks()

            # Ghi √¢m v√† chuy·ªÉn ƒë·ªïi th√†nh vƒÉn b·∫£n
            message = self.chatbot.speech_to_text()

            # ƒê√≥ng pop-up sau khi ghi √¢m xong
            self.close_recording_popup()

            # X·ª≠ l√Ω k·∫øt qu·∫£ ghi √¢m
            if message.startswith("Xin l·ªói"):
                self.append_to_chat("Chatbot", message)
            else:
                self.append_to_chat("B·∫°n", message)
                response = self.chatbot.chat(message)
                self.append_to_chat("Chatbot", response)
            self.status_var.set("S·∫µn s√†ng")
        except Exception as e:
            self.close_recording_popup()  # ƒê√≥ng pop-up n·∫øu c√≥ l·ªói
            self.status_var.set(f"L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")

    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng v·ªõi CustomTkinter"""
        # C·∫•u h√¨nh theme
        ctk.set_appearance_mode("dark")  # Theme: "light", "dark", "system"
        ctk.set_default_color_theme("dark-blue")  # M√†u theme: "blue", "green", "dark-blue"

        # Frame ch√≠nh
        main_frame = ctk.CTkFrame(self.root, fg_color="#1A1B26", corner_radius=0)
        main_frame.pack(fill=ctk.BOTH, expand=True)

        # Tabview cho c√°c tab
        self.tabview = ctk.CTkTabview(
            main_frame,
            fg_color="#2A2D3E",
            segmented_button_fg_color="#3B3F52",
            segmented_button_selected_color="#7289DA",
            segmented_button_selected_hover_color="#5A6EBB",
            text_color="#DCDDDE"
        )
        self.tabview.pack(fill=ctk.BOTH, expand=True, padx=10, pady=10)

        # Tab "Tr√≤ chuy·ªán"
        chat_tab = self.tabview.add("Tr√≤ chuy·ªán")

        # Tab "D·∫°y h·ªçc"
        learning_tab = self.tabview.add("D·∫°y h·ªçc")

        # Thanh tr·∫°ng th√°i
        self.status_var = ctk.StringVar(value="S·∫µn s√†ng")
        status_bar = ctk.CTkLabel(
            main_frame,
            textvariable=self.status_var,
            anchor=ctk.W,
            fg_color="#1A1B26",
            text_color="#7289DA",
            font=("Helvetica", 12)
        )
        status_bar.pack(side=ctk.BOTTOM, fill=ctk.X, padx=10, pady=5)

        # === Giao di·ªán Tab "Tr√≤ chuy·ªán" ===
        # Frame ch·ª©a l·ªãch s·ª≠ tr√≤ chuy·ªán
        chat_frame = ctk.CTkFrame(chat_tab, fg_color="#2A2D3E", corner_radius=10)
        chat_frame.pack(fill=ctk.BOTH, expand=True, padx=10, pady=10)

        # L·ªãch s·ª≠ tr√≤ chuy·ªán (CTkTextbox)
        self.chat_history = ctk.CTkTextbox(
            chat_frame,
            wrap=ctk.WORD,
            state=ctk.DISABLED,
            font=("Helvetica", 14),
            fg_color="#36393F",
            text_color="#DCDDDE",
            border_spacing=10
        )
        self.chat_history.pack(fill=ctk.BOTH, expand=True, padx=5, pady=5)

        # Frame ch·ª©a c√°c n√∫t ƒëi·ªÅu khi·ªÉn
        control_frame = ctk.CTkFrame(chat_tab, fg_color="#2A2D3E", corner_radius=10)
        control_frame.pack(fill=ctk.X, padx=10, pady=(0, 5))

        # N√∫t "X√≥a l·ªãch s·ª≠ tr√≤ chuy·ªán"
        clear_chat_button = ctk.CTkButton(
            control_frame,
            text="X√≥a l·ªãch s·ª≠",
            command=self.clear_chat_history,
            width=120,
            fg_color="#FF5555",
            hover_color="#CC4444",
            font=("Helvetica", 12, "bold")
        )
        clear_chat_button.pack(side=ctk.LEFT, padx=(0, 5))

        # N√∫t "X√≥a d·ªØ li·ªáu t·∫°m th·ªùi"
        clear_temp_button = ctk.CTkButton(
            control_frame,
            text="X√≥a d·ªØ li·ªáu t·∫°m th·ªùi",
            command=self.clear_temp_files,
            width=150,
            fg_color="#FF9500",
            hover_color="#CC7700",
            font=("Helvetica", 12, "bold")
        )
        clear_temp_button.pack(side=ctk.LEFT)

        # Frame nh·∫≠p tin nh·∫Øn
        input_frame = ctk.CTkFrame(chat_tab, fg_color="#2A2D3E", corner_radius=10)
        input_frame.pack(fill=ctk.X, padx=10, pady=5)

        # √î nh·∫≠p tin nh·∫Øn
        self.message_input = ctk.CTkEntry(
            input_frame,
            font=("Helvetica", 14),
            placeholder_text="Nh·∫≠p tin nh·∫Øn...",
            fg_color="#36393F",
            text_color="#DCDDDE",
            border_color="#7289DA",
            border_width=2,
            corner_radius=10
        )
        self.message_input.pack(side=ctk.LEFT, fill=ctk.X, expand=True, padx=(0, 5))
        self.message_input.bind("<Return>", self.send_message)

        # N√∫t g·ª≠i
        send_button = ctk.CTkButton(
            input_frame,
            text="G·ª≠i",
            command=self.send_message,
            width=100,
            fg_color="#7289DA",
            hover_color="#5A6EBB",
            font=("Helvetica", 14, "bold")
        )
        send_button.pack(side=ctk.RIGHT)

        # N√∫t ghi √¢m
        record_button = ctk.CTkButton(
            input_frame,
            text="üé§ N√≥i",
            command=self.record_and_send,
            width=100,
            fg_color="#FF9500",
            hover_color="#CC7700",
            font=("Helvetica", 14, "bold")
        )
        record_button.pack(side=ctk.RIGHT, padx=(0, 5))

        # === Giao di·ªán Tab "D·∫°y h·ªçc" ===
        # Frame nh·∫≠p d·ªØ li·ªáu d·∫°y h·ªçc
        learn_frame = ctk.CTkFrame(learning_tab, fg_color="#2A2D3E", corner_radius=10)
        learn_frame.pack(fill=ctk.BOTH, expand=False, padx=10, pady=10)

        # Nh√£n v√† √¥ nh·∫≠p tin nh·∫Øn ng∆∞·ªùi d√πng
        ctk.CTkLabel(
            learn_frame,
            text="Tin nh·∫Øn ng∆∞·ªùi d√πng:",
            font=("Helvetica", 14),
            text_color="#DCDDDE"
        ).grid(row=0, column=0, sticky=ctk.W, padx=10, pady=5)
        self.learn_message = ctk.CTkEntry(
            learn_frame,
            font=("Helvetica", 14),
            fg_color="#36393F",
            text_color="#DCDDDE",
            border_color="#7289DA",
            border_width=2,
            corner_radius=10
        )
        self.learn_message.grid(row=0, column=1, columnspan=2, sticky=ctk.EW, padx=10, pady=5)

        # Nh√£n v√† √¥ nh·∫≠p ph·∫£n h·ªìi c·ªßa bot
        ctk.CTkLabel(
            learn_frame,
            text="Ph·∫£n h·ªìi c·ªßa bot:",
            font=("Helvetica", 14),
            text_color="#DCDDDE"
        ).grid(row=1, column=0, sticky=ctk.W, padx=10, pady=5)
        self.learn_response = ctk.CTkEntry(
            learn_frame,
            font=("Helvetica", 14),
            fg_color="#36393F",
            text_color="#DCDDDE",
            border_color="#7289DA",
            border_width=2,
            corner_radius=10
        )
        self.learn_response.grid(row=1, column=1, columnspan=2, sticky=ctk.EW, padx=10, pady=5)

        # Nh√£n v√† √¥ nh·∫≠p ch·ªß ƒë·ªÅ (t√πy ch·ªçn)
        ctk.CTkLabel(
            learn_frame,
            text="Ch·ªß ƒë·ªÅ (t√πy ch·ªçn):",
            font=("Helvetica", 14),
            text_color="#DCDDDE"
        ).grid(row=2, column=0, sticky=ctk.W, padx=10, pady=5)
        self.learn_tag = ctk.CTkEntry(
            learn_frame,
            font=("Helvetica", 14),
            fg_color="#36393F",
            text_color="#DCDDDE",
            border_color="#7289DA",
            border_width=2,
            corner_radius=10
        )
        self.learn_tag.grid(row=2, column=1, columnspan=2, sticky=ctk.EW, padx=10, pady=5)

        # M√¥ t·∫£ ch·ªß ƒë·ªÅ
        ctk.CTkLabel(
            learn_frame,
            text="Ch·ªß ƒë·ªÅ ƒë·ªÉ nh√≥m c√°c tin nh·∫Øn t∆∞∆°ng t·ª±. N·∫øu ƒë·ªÉ tr·ªëng, h·ªá th·ªëng t·ª± ƒë·ªông g√°n.",
            font=("Helvetica", 12),
            text_color="#7289DA",
            wraplength=600
        ).grid(row=3, column=0, columnspan=3, padx=10, pady=5)

        # N√∫t d·∫°y bot
        teach_button = ctk.CTkButton(
            learn_frame,
            text="D·∫°y Bot",
            command=self.teach_chatbot,
            fg_color="#7289DA",
            hover_color="#5A6EBB",
            font=("Helvetica", 14, "bold")
        )
        teach_button.grid(row=4, column=0, columnspan=3, pady=15)

        # Frame hi·ªÉn th·ªã intents
        intents_frame = ctk.CTkFrame(learning_tab, fg_color="#2A2D3E", corner_radius=10)
        intents_frame.pack(fill=ctk.BOTH, expand=True, padx=10, pady=(0, 10))

        # Treeview hi·ªÉn th·ªã intents (s·ª≠ d·ª•ng ttk.Treeview t·ª´ tkinter.ttk)
        self.intents_tree = ttk.Treeview(
            intents_frame,
            columns=("tag", "patterns", "responses"),
            show="headings"
        )
        self.intents_tree.heading("tag", text="Ch·ªß ƒë·ªÅ")
        self.intents_tree.heading("patterns", text="M·∫´u c√¢u h·ªèi")
        self.intents_tree.heading("responses", text="M·∫´u c√¢u tr·∫£ l·ªùi")
        self.intents_tree.column("tag", width=100)
        self.intents_tree.column("patterns", width=250)
        self.intents_tree.column("responses", width=250)
        self.intents_tree.pack(fill=ctk.BOTH, expand=True, padx=5, pady=5)

        # C·∫≠p nh·∫≠t style cho Treeview
        style = ttk.Style()
        style.configure("Treeview", background="#36393F", foreground="#DCDDDE", fieldbackground="#36393F")
        style.configure("Treeview.Heading", background="#7289DA", foreground="#FFFFFF", font=("Helvetica", 12, "bold"))

        # C·∫≠p nh·∫≠t intents ban ƒë·∫ßu
        self.update_intents_tree()

        # Tin nh·∫Øn ch√†o m·ª´ng
        self.append_to_chat("Chatbot", "Xin ch√†o! T√¥i l√† chatbot h·ªçc s√¢u ti·∫øng Vi·ªát. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?")
        self.message_input.focus()

    def append_to_chat(self, sender, message):
        """Th√™m tin nh·∫Øn v√†o l·ªãch s·ª≠ tr√≤ chuy·ªán"""
        self.chat_history.configure(state=ctk.NORMAL)
        if self.chat_history.get("1.0", "end-1c") != "":
            self.chat_history.insert(ctk.END, "\n\n")
        sender_tag = "user" if sender == "B·∫°n" else "bot"
        self.chat_history.insert(ctk.END, f"{sender}: ", sender_tag)
        self.chat_history.insert(ctk.END, message)
        # Ch·ªâ t√πy ch·ªânh m√†u s·∫Øc, kh√¥ng d√πng font trong tag_config
        self.chat_history.tag_config("user", foreground="#7289DA")
        self.chat_history.tag_config("bot", foreground="#4CAF50")
        self.chat_history.configure(state=ctk.DISABLED)
        self.chat_history.yview(ctk.END)

    def send_message(self, event=None):
        """G·ª≠i tin nh·∫Øn v√† nh·∫≠n ph·∫£n h·ªìi t·ª´ chatbot"""
        message = self.message_input.get().strip()
        if not message:
            return
        self.append_to_chat("B·∫°n", message)
        try:
            self.status_var.set("ƒêang x·ª≠ l√Ω...")
            self.root.update_idletasks()
            response = self.chatbot.chat(message)
            self.append_to_chat("Chatbot", response)
            self.status_var.set("S·∫µn s√†ng")
        except Exception as e:
            self.status_var.set(f"L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói: {str(e)}")
        self.message_input.delete(0, ctk.END)

    def teach_chatbot(self):
        """D·∫°y chatbot ph·∫£n h·ªìi m·ªõi"""
        message = self.learn_message.get().strip()
        response = self.learn_response.get().strip()
        tag = self.learn_tag.get().strip() or None
        if not message or not response:
            messagebox.showwarning("C·∫ßn nh·∫≠p d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p c·∫£ tin nh·∫Øn v√† ph·∫£n h·ªìi")
            return
        try:
            self.status_var.set("ƒêang h·ªçc...")
            self.root.update_idletasks()
            result = self.chatbot.learn(message, response, tag)
            messagebox.showinfo("H·ªçc xong", result)
            self.update_intents_tree()
            self.learn_message.delete(0, ctk.END)
            self.learn_response.delete(0, ctk.END)
            self.learn_tag.delete(0, ctk.END)
            self.status_var.set("S·∫µn s√†ng")
        except Exception as e:
            self.status_var.set(f"L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói khi h·ªçc: {str(e)}")

    def clear_temp_files(self):
        """X√≥a c√°c file t·∫°m th·ªùi v√† hi·ªÉn th·ªã th√¥ng b√°o"""
        try:
            self.status_var.set("ƒêang x√≥a d·ªØ li·ªáu t·∫°m th·ªùi...")
            self.root.update_idletasks()
            result = self.chatbot.clear_temp_files()
            self.append_to_chat("Chatbot", result)
            self.status_var.set("S·∫µn s√†ng")
        except Exception as e:
            self.status_var.set(f"L·ªói: {str(e)}")
            messagebox.showerror("L·ªói", f"ƒê√£ x·∫£y ra l·ªói khi x√≥a d·ªØ li·ªáu: {str(e)}")

    def clear_chat_history(self):
        """X√≥a to√†n b·ªô l·ªãch s·ª≠ tr√≤ chuy·ªán"""
        self.chat_history.configure(state=ctk.NORMAL)
        self.chat_history.delete("1.0", ctk.END)
        self.chat_history.configure(state=ctk.DISABLED)
        self.append_to_chat("Chatbot", "L·ªãch s·ª≠ tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a.")

    def update_intents_tree(self):
        """C·∫≠p nh·∫≠t danh s√°ch intents trong treeview"""
        for item in self.intents_tree.get_children():
            self.intents_tree.delete(item)
        for intent in self.chatbot.intents["intents"]:
            patterns = ", ".join(intent["patterns"][:3]) + ("..." if len(intent["patterns"]) > 3 else "")
            responses = ", ".join(intent["responses"][:3]) + ("..." if len(intent["responses"]) > 3 else "")
            self.intents_tree.insert("", ctk.END, values=(intent["tag"], patterns, responses))

if __name__ == "__main__":
    root = ctk.CTk()
    app = ChatbotApp(root)
    root.mainloop()